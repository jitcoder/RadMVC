{
  "name": "Radmvc",
  "tagline": "RadMVC is the MC for React giving you a full MVC experience",
  "body": "# RadMVC\r\n\r\nRadMVC is the MC for React. It's an MVC framework which uses React for it's view.\r\n\r\nEssentially, RadMVC provides you with models and controllers to give you a complete MVC experience when using React.\r\n\r\nThe goal of this framework is to provide a **simple** and **concise** way to separate your presentation, business and data layers with the **smallest learning curve** possible.\r\n\r\nPlease feel free to view the 'Sales' sample app in the examples directory.\r\n\r\n*(note: the library currently builds fine, the examples and docs are currently being worked on. npm install radmvc to install)*\r\n\r\n#### Hello World Example\r\n###### homecontroller.js\r\n```javascript\r\nimport Rad from 'radmvc';\r\nimport React from 'react';\r\n\r\nclass HomeController extends Rad.Controller{\r\n    \r\n    constructor(){\r\n        super();\r\n    }\r\n    \r\n    index(){\r\n        return <div>Hello World <button onClick={Rad.HomeController.goodbye}>Bye!</button></div>;\r\n    }\r\n    \r\n    goodbye(){\r\n        return <div>Good Bye!</div>;\r\n    }\r\n    \r\n}\r\n//register HomeController with RadMVC\r\nRad.Controllers.HomeController = HomeController;\r\n```\r\n###### index.html\r\n```html\r\n<html>\r\n    <head>\r\n        <title>Hello World</title>\r\n    </head>\r\n    <body>\r\n        <div controller=\"HomeController\"></div>\r\n    </body>\r\n    <script src=\"/radmvc.min.js\"></script>\r\n</html>\r\n```\r\n\r\n### Contents\r\n- Examples\r\n- Documentation\r\n- Installation\r\n- Controllers\r\n- Models\r\n- Guidelines\r\n\r\n### Examples\r\n- [Todo List](https://github.com/jitcoder/RadMVC/tree/master/examples/todolist) (Simple Example)\r\n\r\n### Documentation\r\n- [RadMVC](https://github.com/jitcoder/radmvc/docs/radmvc.md)\r\n- [AjaxModel](https://github.com/jitcoder/radmvc/docs/ajaxmodel.md)\r\n- DbModel (*coming soon*)\r\n\r\n#### Installation\r\n\r\n##### NPM\r\n```sh\r\nnpm install radmvc --save\r\n```\r\n\r\n##### Minified File\r\n```sh\r\nhttps://ComingSoon.com/from/a/cdn.min.js\r\n```\r\n\r\n##### Bower\r\n```sh\r\nAlso Coming Soon\r\n```\r\n\r\n### Controller\r\n\r\nTo create a controller, create a class which extends Rad.Controller\r\n```javascript\r\nclass MyController extends Rad.Controller\r\n```\r\n\r\nRadMVC maintains a single instance of your controller  class and will call the controller's **index** method to display the intial view.\r\n```javascript\r\nclass MyController extends Rad.Controller{\r\n    constructor(){\r\n        super();\r\n    }\r\n    \r\n    index(){\r\n        return <div>sup</div>\r\n    }\r\n}\r\n```\r\n\r\nThe last step is to register the controller with RadMVC. This is done outside of the class definition, similar to how propTypes are defined with React using ES6.\r\n\r\n```javascript\r\nRad.Controllers.MyController = MyController;\r\n```\r\n\r\nIn order for RadMVC to know which DOM element to use as the 'View Port', you must assign a DOM element with an attribute **controller=NAME-OF-YOUR-CONTROLLER**.\r\n\r\n```html\r\n<div controller=\"MyController\"></div>\r\n```\r\n\r\nThe purpose of the controller is to contain your 'state' as well as all of your business logic. One way to look at it would be: your controller class is going to be your Root react component. Your React components should technically be stateless (unless unavoidable) and only concern themselves with rendering using props the controller passes to them. For an example of this please view the 'Sales Example'\r\n\r\nYou will notice in the Sales Example that the controller's methods aren't bounded to the controller instance in the constructor. This is because RadMVC will automagically bind all controller methods to the instance of the controller that it maintains.\r\n\r\n### Models\r\n##### AjaxModel\r\nThe AjaxModels exposes RESTful ajax methods to the inheriting class, enabling that class to utilize web api's as it's datasource.\r\nMethods which are exposed are get,post,put,delete. Each method has the same signature: (url,data,contentType,additionalHeaders)\r\n\r\n- **url** type:string - required\r\n- **data** type:any - required for post and put\r\n- **contentType** type:string - optional *defaults to application/json*\r\n- **additionalHeaders** type:array - optional\r\n\r\n##### eg.\r\n```javascript\r\npost('/someurl',{hello:\"world\"})\r\n.then(()=>{\r\n\r\n})\r\n.catch((e)=>{\r\n\r\n};\r\n```\r\nor\r\n```javascript\r\ntry{\r\n data = await post('/someurl',{hello:\"world\"});\r\n}\r\ncatch(e){\r\n\r\n}\r\n```\r\n\r\nAll methods return a **Promise**",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}